{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-\\.]+"},"docs":[{"location":"","text":"Home \u00b6 EasyEnemies is an open-source Enemy module that can help you quickly make functional enemies in your games. Why choose EasyEnemies? \u00b6 EasyEnemies aims to cut the amount of time it takes to typically set up enemies in a typical roblox game by having the core foundations of an enemy ai already coded. EveryEnemy registered by the module is stored under the models tag name or model name in a hash table to keep track of either individual enemies or a collection of them. There are a list of settings that you can change to get each enemy to fit your game in the best way possible. In the near future EasyEnemies will be functional with non-humanoid models to aid performance. To get started visit Getting Started . Links \u00b6 github roblox Library","title":"Home"},{"location":"#home","text":"EasyEnemies is an open-source Enemy module that can help you quickly make functional enemies in your games.","title":"Home"},{"location":"#why_choose_easyenemies","text":"EasyEnemies aims to cut the amount of time it takes to typically set up enemies in a typical roblox game by having the core foundations of an enemy ai already coded. EveryEnemy registered by the module is stored under the models tag name or model name in a hash table to keep track of either individual enemies or a collection of them. There are a list of settings that you can change to get each enemy to fit your game in the best way possible. In the near future EasyEnemies will be functional with non-humanoid models to aid performance. To get started visit Getting Started .","title":"Why choose EasyEnemies?"},{"location":"#links","text":"github roblox Library","title":"Links"},{"location":"license/","text":"","title":"License"},{"location":"extensions/janitor/","text":"Janitor \u00b6 Custom cleanup methods \u00b6 Other garbage collection implementations such as Maid don't give you a choice with how you clean up objects. You can either give a function, a connection, an Instance, or a table with a Destroy method. Janitor allows you to specify how you clean up objects, so you can cancel a Tween when the Janitor is cleaned up. Promise Support \u00b6 Janitor supports adding Promises to it natively, which will then cancel if the Janitor is cleaned up. This makes Janitor the only library of its kind with support for this implementation of Promises. Instances linking \u00b6 Janitor's LinkToInstance method allows you to cleanup the Janitor when a linked Instance is destroyed. This allows you to execute behavior on destruction as well as cleanup objects quickly. Links \u00b6 Site Github DevForum","title":"Janitor"},{"location":"extensions/janitor/#janitor","text":"","title":"Janitor"},{"location":"extensions/janitor/#custom_cleanup_methods","text":"Other garbage collection implementations such as Maid don't give you a choice with how you clean up objects. You can either give a function, a connection, an Instance, or a table with a Destroy method. Janitor allows you to specify how you clean up objects, so you can cancel a Tween when the Janitor is cleaned up.","title":"Custom cleanup methods"},{"location":"extensions/janitor/#promise_support","text":"Janitor supports adding Promises to it natively, which will then cancel if the Janitor is cleaned up. This makes Janitor the only library of its kind with support for this implementation of Promises.","title":"Promise Support"},{"location":"extensions/janitor/#instances_linking","text":"Janitor's LinkToInstance method allows you to cleanup the Janitor when a linked Instance is destroyed. This allows you to execute behavior on destruction as well as cleanup objects quickly.","title":"Instances linking"},{"location":"extensions/janitor/#links","text":"Site Github DevForum","title":"Links"},{"location":"extensions/simplepath/","text":"SimplePath \u00b6 SimplePath is an open-source pathfinding module that gives you the ability to quickly create a pathfinding script for humanoids and non-humanoids with just a few lines of code. Pathfinding is done using Roblox's PathfindingService. This module works by using a \"repetitive\" approach to pathfinding. The pathfinding agent moves a more efficient path when computed repetitively instead of just once. Part of the reason why is because computing the path once doesn't guarantee that the agent reaches the goal as expected. Taking the repetitive approach accounts for any obstructions or obstacles blocking the path at the current time. This guarantees that the agent will reach its goal no matter what as long as it's traversable within the scope of PathfindingService. Although you can still use SimplePath normally, it is strongly suggested that you take a repetitive approach to pathfinding as this was the primary concept kept in mind during the development of this module. However, in some scenarios, it might be better to compute the path just once. For example, if the agent does not interact with moving objects, you should consider changing the structure of your pathfinding code by reducing the number of repetitions between path computations to improve performance. Links \u00b6 Site Github DevForum Roblox","title":"Simple Path"},{"location":"extensions/simplepath/#simplepath","text":"SimplePath is an open-source pathfinding module that gives you the ability to quickly create a pathfinding script for humanoids and non-humanoids with just a few lines of code. Pathfinding is done using Roblox's PathfindingService. This module works by using a \"repetitive\" approach to pathfinding. The pathfinding agent moves a more efficient path when computed repetitively instead of just once. Part of the reason why is because computing the path once doesn't guarantee that the agent reaches the goal as expected. Taking the repetitive approach accounts for any obstructions or obstacles blocking the path at the current time. This guarantees that the agent will reach its goal no matter what as long as it's traversable within the scope of PathfindingService. Although you can still use SimplePath normally, it is strongly suggested that you take a repetitive approach to pathfinding as this was the primary concept kept in mind during the development of this module. However, in some scenarios, it might be better to compute the path just once. For example, if the agent does not interact with moving objects, you should consider changing the structure of your pathfinding code by reducing the number of repetitions between path computations to improve performance.","title":"SimplePath"},{"location":"extensions/simplepath/#links","text":"Site Github DevForum Roblox","title":"Links"},{"location":"guides/settings/","text":"As seen in Getting Started there are many settings you can tinker with. General Overview \u00b6 -- Defining Enemy Settings local enemy_settings = { health = 100 , -- Enemy Health damage = 1 , -- Enemy Base Damage wander = false , -- Enemy Wandering attack_range = 20 , -- Enemy Search Radius attack_radius = 5 , -- Enemy Attack Radius attack_ally = false , -- Enemy Attacking Team Members attack_npcs = true , -- Enemy Attacking Random NPC's attack_players = true , -- Enemy Attacking Players default_animations = { 8972576500 }, -- Enemy Animations should be used for 'Light' Attacks // Example default_animations = {8972576500} default_functions = { -- Functions for said 'Light' Attacks ^ function ( target ) -- functions pass the target as the first argument automatically print ( target ) end , }, special_animations = { 8972576500 }, -- Enemy Animations should be used for 'Heavy' Attacks // Example special_animations = {8972576500} special_functions = { -- Functions for said 'Heavy' Attacks ^ function ( target ) -- functions pass the target as the first argument automatically print ( 'specialMove' ) end , }, } General Settings \u00b6 Health \u00b6 Changes the initial health to setting's value. health = 100, -- Enemy Health Damage \u00b6 Creates damage set to the setting's value. damage = 1, -- Enemy Base Damage Wander \u00b6 If set to true enemy will walk around freely withing the attack_range wander = false, -- Enemy Wandering Attack Settings \u00b6 Attack Range \u00b6 The search radius of initialized enemy attack_range = 20, -- Enemy Search Radius Attack Radius \u00b6 The maximum distance of the enemy target can be in order for an enemy to attack attack_radius = 5, -- Enemy Attack Radius Attack Ally \u00b6 Enemy will attack Humanoid Model with the same tag as itself attack_ally = false, -- Enemy Attacking Team Members Attack Npcs \u00b6 Enemy will attack Humanoid Model that does not possess the same tags nor is a player attack_npcs = true, -- Enemy Attacking Random NPC's Attack Players \u00b6 Enemy will attack players attack_players = true, -- Enemy Attacking Players Animations & Effects \u00b6 Here we will encompass default and special into 2 bullet points default attacks \u00b6 Default animations should be companied by functions, the index of the animation matches up with the index of the function, lets take the following code for example: default_animations = { 8972576500 , 9039173175 }, -- Enemy Animations should be used for 'Light' Attacks // Example default_animations = {8972576500} default_functions = { -- Functions for said 'Light' Attacks ^ function ( target ) -- functions pass the target as the first argument automatically print ( 'move 1' ) end , function ( target ) -- functions pass the target as the first argument automatically print ( 'move 2' ) end , } if the animation 8972576500 (default_animations[2]) at the index of 2 plays the following function will be called: function ( target ) -- functions pass the target as the first argument automatically print ( 'move 2' ) end","title":"Enemy Settings"},{"location":"guides/settings/#general_overview","text":"-- Defining Enemy Settings local enemy_settings = { health = 100 , -- Enemy Health damage = 1 , -- Enemy Base Damage wander = false , -- Enemy Wandering attack_range = 20 , -- Enemy Search Radius attack_radius = 5 , -- Enemy Attack Radius attack_ally = false , -- Enemy Attacking Team Members attack_npcs = true , -- Enemy Attacking Random NPC's attack_players = true , -- Enemy Attacking Players default_animations = { 8972576500 }, -- Enemy Animations should be used for 'Light' Attacks // Example default_animations = {8972576500} default_functions = { -- Functions for said 'Light' Attacks ^ function ( target ) -- functions pass the target as the first argument automatically print ( target ) end , }, special_animations = { 8972576500 }, -- Enemy Animations should be used for 'Heavy' Attacks // Example special_animations = {8972576500} special_functions = { -- Functions for said 'Heavy' Attacks ^ function ( target ) -- functions pass the target as the first argument automatically print ( 'specialMove' ) end , }, }","title":"General Overview"},{"location":"guides/settings/#general_settings","text":"","title":"General Settings"},{"location":"guides/settings/#health","text":"Changes the initial health to setting's value. health = 100, -- Enemy Health","title":"Health"},{"location":"guides/settings/#damage","text":"Creates damage set to the setting's value. damage = 1, -- Enemy Base Damage","title":"Damage"},{"location":"guides/settings/#wander","text":"If set to true enemy will walk around freely withing the attack_range wander = false, -- Enemy Wandering","title":"Wander"},{"location":"guides/settings/#attack_settings","text":"","title":"Attack Settings"},{"location":"guides/settings/#attack_range","text":"The search radius of initialized enemy attack_range = 20, -- Enemy Search Radius","title":"Attack Range"},{"location":"guides/settings/#attack_radius","text":"The maximum distance of the enemy target can be in order for an enemy to attack attack_radius = 5, -- Enemy Attack Radius","title":"Attack Radius"},{"location":"guides/settings/#attack_ally","text":"Enemy will attack Humanoid Model with the same tag as itself attack_ally = false, -- Enemy Attacking Team Members","title":"Attack Ally"},{"location":"guides/settings/#attack_npcs","text":"Enemy will attack Humanoid Model that does not possess the same tags nor is a player attack_npcs = true, -- Enemy Attacking Random NPC's","title":"Attack Npcs"},{"location":"guides/settings/#attack_players","text":"Enemy will attack players attack_players = true, -- Enemy Attacking Players","title":"Attack Players"},{"location":"guides/settings/#animations_effects","text":"Here we will encompass default and special into 2 bullet points","title":"Animations &amp; Effects"},{"location":"guides/settings/#default_attacks","text":"Default animations should be companied by functions, the index of the animation matches up with the index of the function, lets take the following code for example: default_animations = { 8972576500 , 9039173175 }, -- Enemy Animations should be used for 'Light' Attacks // Example default_animations = {8972576500} default_functions = { -- Functions for said 'Light' Attacks ^ function ( target ) -- functions pass the target as the first argument automatically print ( 'move 1' ) end , function ( target ) -- functions pass the target as the first argument automatically print ( 'move 2' ) end , } if the animation 8972576500 (default_animations[2]) at the index of 2 plays the following function will be called: function ( target ) -- functions pass the target as the first argument automatically print ( 'move 2' ) end","title":"default attacks"},{"location":"guides/start/","text":"This tutorial shows you how you can set up EasyEnemies and teaches you a basic implementation of the module. Installation \u00b6 Get the module from the Roblox library Note For the purposes of the tutorial, the script assumes the modulescript is in game.ServerScriptService ; For security purposes it would be best if placed game.ServerScriptService . After you insert the module to your place, add a new script to game.ServerScriptService and paste the folowing code to start using the module: --Import the module so you can start using it local ServerScriptService = game : GetService ( \"ServerScriptService\" ) local EasyEnemies = require ( ServerScriptService . EasyEnemies ) The next part of the code defines all of the different methods of usage: -- Defining Enemy Settings local enemy_settings = { health = 100 , -- Enemy Health damage = 1 , -- Enemy Base Damage wander = false , -- Enemy Wandering attack_range = 20 , -- Enemy Search Radius attack_radius = 5 , -- Enemy Attack Radius attack_ally = false , -- Enemy Attacking Team Members attack_npcs = true , -- Enemy Attacking Random NPC's attack_players = true , -- Enemy Attacking Players default_animations = { 8972576500 }, -- Enemy Animations should be used for 'Light' Attacks // Example default_animations = {8972576500} default_functions = { -- Functions for said 'Light' Attacks ^ function ( target ) -- functions pass the target as the first argument automatically print ( target ) end , }, special_animations = { 8972576500 }, -- Enemy Animations should be used for 'Heavy' Attacks // Example special_animations = {8972576500} special_functions = { -- Functions for said 'Heavy' Attacks ^ function ( target ) -- functions pass the target as the first argument automatically print ( 'specialMove' ) end , }, } Note EasyEnemies.new() is a constructor that initializes a new Enemy and it should only be initialized once per enemy. There are 2 ways to initialize enemies \u00b6 Method 1: Using CollectionService Tags \u00b6 The following is a video showcasing the usage of tags: The following code initializes every model with 'EnemyTag' CollectionService Tag: local Enemy = EasyEnemies . new ( 'EnemyTag' , enemy_settings ) Method 2: Using Models \u00b6 The following is a video showcasing the usage of models: The following code initializes the model passed in the first parameter on the EasyEnemies.new() function: local Enemy = EasyEnemies . new ( Dummy , enemy_settings ) -- Initializes specific Model Choosing the right method \u00b6 SimplePath gives you the freedom to code in any method you prefer. You are not limited to the two methods mentioned in this tutorial as they are simply meant to be examples. You can even combine both methods and implement them together at once. It all depends on how you decide to structure your code based on the performance, compatibility, etc. and personal preference.","title":"Getting Started"},{"location":"guides/start/#installation","text":"Get the module from the Roblox library Note For the purposes of the tutorial, the script assumes the modulescript is in game.ServerScriptService ; For security purposes it would be best if placed game.ServerScriptService . After you insert the module to your place, add a new script to game.ServerScriptService and paste the folowing code to start using the module: --Import the module so you can start using it local ServerScriptService = game : GetService ( \"ServerScriptService\" ) local EasyEnemies = require ( ServerScriptService . EasyEnemies ) The next part of the code defines all of the different methods of usage: -- Defining Enemy Settings local enemy_settings = { health = 100 , -- Enemy Health damage = 1 , -- Enemy Base Damage wander = false , -- Enemy Wandering attack_range = 20 , -- Enemy Search Radius attack_radius = 5 , -- Enemy Attack Radius attack_ally = false , -- Enemy Attacking Team Members attack_npcs = true , -- Enemy Attacking Random NPC's attack_players = true , -- Enemy Attacking Players default_animations = { 8972576500 }, -- Enemy Animations should be used for 'Light' Attacks // Example default_animations = {8972576500} default_functions = { -- Functions for said 'Light' Attacks ^ function ( target ) -- functions pass the target as the first argument automatically print ( target ) end , }, special_animations = { 8972576500 }, -- Enemy Animations should be used for 'Heavy' Attacks // Example special_animations = {8972576500} special_functions = { -- Functions for said 'Heavy' Attacks ^ function ( target ) -- functions pass the target as the first argument automatically print ( 'specialMove' ) end , }, } Note EasyEnemies.new() is a constructor that initializes a new Enemy and it should only be initialized once per enemy.","title":"Installation"},{"location":"guides/start/#there_are_2_ways_to_initialize_enemies","text":"","title":"There are 2 ways to initialize enemies"},{"location":"guides/start/#method_1_using_collectionservice_tags","text":"The following is a video showcasing the usage of tags: The following code initializes every model with 'EnemyTag' CollectionService Tag: local Enemy = EasyEnemies . new ( 'EnemyTag' , enemy_settings )","title":"Method 1: Using CollectionService Tags"},{"location":"guides/start/#method_2_using_models","text":"The following is a video showcasing the usage of models: The following code initializes the model passed in the first parameter on the EasyEnemies.new() function: local Enemy = EasyEnemies . new ( Dummy , enemy_settings ) -- Initializes specific Model","title":"Method 2: Using Models"},{"location":"guides/start/#choosing_the_right_method","text":"SimplePath gives you the freedom to code in any method you prefer. You are not limited to the two methods mentioned in this tutorial as they are simply meant to be examples. You can even combine both methods and implement them together at once. It all depends on how you decide to structure your code based on the performance, compatibility, etc. and personal preference.","title":"Choosing the right method"}]}